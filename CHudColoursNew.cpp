#include "plugin.h"
#include "CHudColours.h"
#include "CHudColoursNew.h"
#include "Settings.h"

using namespace plugin;

CHudColoursNew HudColourNew;

CHudColoursNew::CHudColoursNew() {
	patch::RedirectJump(0x58FDA0, CHudColoursNew::ReadDefaultColors);
}

void CHudColoursNew::Initialise() {
	// Color data
	config_file hudColor(PLUGIN_PATH(s.BuildFilePath("bbhud\\data\\", "hudColor.dat")));

	CRGBA rgba = CRGBA(160, 32, 240, 255);
	READ_RGBA(hudColor, HUD_COLOUR_RED, "HUD_COLOUR_RED", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_GREEN, "HUD_COLOUR_GREEN", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_BLUEDARK, "HUD_COLOUR_BLUEDARK", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_BLUELIGHT, "HUD_COLOUR_BLUELIGHT", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_WHITE, "HUD_COLOUR_WHITE", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_BLACK, "HUD_COLOUR_BLACK", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_ORANGE, "HUD_COLOUR_ORANGE", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_PURPLE, "HUD_COLOUR_PURPLE", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_GREY, "HUD_COLOUR_GREY", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_REDDARK, "HUD_COLOUR_REDDARK", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_GREENDARK, "HUD_COLOUR_GREENDARK", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_ORANGELIGHT, "HUD_COLOUR_ORANGELIGHT", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_GREYDARK, "HUD_COLOUR_GREYDARK", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_BLUE, "HUD_COLOUR_BLUE", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_YELLOW, "HUD_COLOUR_YELLOW", rgba);

	READ_RGBA(hudColor, HUD_COLOUR_CLOCK, "HUD_COLOUR_CLOCK", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_CASH, "HUD_COLOUR_CASH", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_HEALTH, "HUD_COLOUR_HEALTH", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_ARMOUR, "HUD_COLOUR_ARMOUR", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_BREATH, "HUD_COLOUR_BREATH", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_WEAPON_ICON, "HUD_COLOUR_WEAPON_ICON", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_AMMO, "HUD_COLOUR_AMMO", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_WANTED_N, "HUD_COLOUR_WANTED_N", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_WANTED_A, "HUD_COLOUR_WANTED_A", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_ZONE_NAME, "HUD_COLOUR_ZONE_NAME", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_VEHICLE_NAME, "HUD_COLOUR_VEHICLE_NAME", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_RADIO_NAME_N, "HUD_COLOUR_RADIO_NAME_N", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_RADIO_NAME_A, "HUD_COLOUR_RADIO_NAME_A", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_RADIO_NAME_A, "HUD_COLOUR_RADIO_NAME_A", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_RADIO_NAME_A, "HUD_COLOUR_RADIO_NAME_A", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_HELP_TEXT, "HUD_COLOUR_HELP_TEXT", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_HELP_BOX, "HUD_COLOUR_HELP_BOX", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_SUBTITLES, "HUD_COLOUR_SUBTITLES", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_WASTED, "HUD_COLOUR_WASTED", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_BUSTED, "HUD_COLOUR_BUSTED", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_MISSION_RESULT, "HUD_COLOUR_MISSION_RESULT", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_MISSION_TITLE, "HUD_COLOUR_MISSION_TITLE", rgba);
	READ_RGBA(hudColor, HUD_COLOUR_DAMAGE, "HUD_COLOUR_DAMAGE", rgba);
}

void CHudColoursNew::Shutdown() {
	;;
}

void __fastcall CHudColoursNew::ReadDefaultColors(CRGBA* color, int) {
	HudColourNew.Initialise();

	CRGBA DefaultColorList[] = {
		HudColourNew.HUD_COLOUR_RED,
		HudColourNew.HUD_COLOUR_GREEN,
		HudColourNew.HUD_COLOUR_BLUEDARK,
		HudColourNew.HUD_COLOUR_BLUELIGHT,
		HudColourNew.HUD_COLOUR_WHITE,
		HudColourNew.HUD_COLOUR_BLACK,
		HudColourNew.HUD_COLOUR_ORANGE,
		HudColourNew.HUD_COLOUR_PURPLE,
		HudColourNew.HUD_COLOUR_GREY,
		HudColourNew.HUD_COLOUR_REDDARK,
		HudColourNew.HUD_COLOUR_GREENDARK,
		HudColourNew.HUD_COLOUR_ORANGELIGHT,
		HudColourNew.HUD_COLOUR_GREYDARK,
		HudColourNew.HUD_COLOUR_BLUE,
		HudColourNew.HUD_COLOUR_YELLOW,
	};

	for (int i = 0; i < 15; i++)
		color[i] = DefaultColorList[i];
}